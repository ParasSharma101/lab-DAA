#include <iostream>
#include <limits.h>
using namespace std;

const int MAX_SIZE = 100;
const int INF = INT_MAX;

struct Edge {
    int src, dest, weight;
};

void bellmanFord(Edge edges[], int vertices, int edgesCount, int src) {
    int dist[MAX_SIZE];
    for (int i = 0; i < vertices; ++i) {
        dist[i] = INF;
    }
    dist[src] = 0;

    // Relax all edges |V| - 1 times
    for (int i = 0; i < vertices - 1; ++i) {
        for (int j = 0; j < edgesCount; ++j) {
            int u = edges[j].src;
            int v = edges[j].dest;
            int weight = edges[j].weight;
            if (dist[u] != INF && dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
            }
        }
    }

    // Check for negative weight cycles
    for (int i = 0; i < edgesCount; ++i) {
        int u = edges[i].src;
        int v = edges[i].dest;
        int weight = edges[i].weight;
        if (dist[u] != INF && dist[u] + weight < dist[v]) {
            cout << "Graph contains negative weight cycle\n";
            return;
        }
    }

    // Print shortest distances from source
    cout << "Vertex\t Distance from Source\n";
    for (int i = 0; i < vertices; ++i) {
        cout << i << "\t\t" << dist[i] << endl;
    }
}

int main() {
    int vertices, edgesCount;
    cout << "Enter the number of vertices in the graph: ";
    cin >> vertices;

    cout << "Enter the number of edges in the graph: ";
    cin >> edgesCount;

    Edge edges[MAX_SIZE];
    cout << "Enter the source, destination, and weight of each edge:\n";
    for (int i = 0; i < edgesCount; ++i) {
        cin >> edges[i].src >> edges[i].dest >> edges[i].weight;
    }

    int src;
    cout << "Enter Akshay's house location (source vertex number): ";
    cin >> src;

    bellmanFord(edges, vertices, edgesCount, src);

    return 0;
}
