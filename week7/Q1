#include <iostream>
#include <limits.h>
#include <queue>
using namespace std;

const int MAX_SIZE = 100;

// Function to find the vertex with minimum distance value, from the set of vertices not yet included in shortest path tree
int minDistance(int dist[], bool visited[], int vertices) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < vertices; ++v) {
        if (!visited[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }

    return min_index;
}

// Function to print the shortest path from source to j using parent array
void printPath(int parent[], int j) {
    // Base Case: If j is the source vertex
    if (parent[j] == -1)
        return;

    // Recursively print the shortest path from source to parent of j
    printPath(parent, parent[j]);

    cout << j << " ";
}

// Function to print the solution (shortest distances and paths from source)
void printSolution(int dist[], int parent[], int src, int vertices) {
    cout << "Vertex\t Distance\tPath\n";
    for (int i = 0; i < vertices; i++) {
        cout << src << " -> " << i << "\t " << dist[i] << "\t\t" << src << " ";
        printPath(parent, i);
        cout << endl;
    }
}

// Function to perform Dijkstra's algorithm to find shortest paths from source to all vertices
void dijkstra(int graph[MAX_SIZE][MAX_SIZE], int src, int vertices) {
    int dist[MAX_SIZE]; // Array to store shortest distance from source to i
    bool visited[MAX_SIZE]; // Array to mark visited vertices
    int parent[MAX_SIZE]; // Array to store the parent vertex of each vertex in shortest path tree

    // Initialize dist[], visited[], and parent[] arrays
    for (int i = 0; i < vertices; ++i) {
        dist[i] = INT_MAX;
        visited[i] = false;
        parent[i] = -1;
    }

    // Distance from source to itself is 0
    dist[src] = 0;

    // Find shortest path for all vertices
    for (int count = 0; count < vertices - 1; ++count) {
        // Pick the minimum distance vertex from the set of vertices not yet processed
        int u = minDistance(dist, visited, vertices);
        visited[u] = true; // Mark the picked vertex as processed

        // Update dist[] value of the adjacent vertices of the picked vertex
        for (int v = 0; v < vertices; ++v) {
            // Update dist[v] only if it is not visited, there is an edge from u to v, and the total weight of path from src to v through u is smaller than current value of dist[v]
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                parent[v] = u; // Update parent vertex of v in shortest path tree
            }
        }
    }

    // Print the solution (shortest distances and paths from source)
    printSolution(dist, parent, src, vertices);
}

int main() {
    int vertices;
    cout << "Enter the number of vertices in the graph: ";
    cin >> vertices;

    int graph[MAX_SIZE][MAX_SIZE];
    cout << "Enter the adjacency matrix of the graph:\n";
    for (int i = 0; i < vertices; ++i) {
        for (int j = 0; j < vertices; ++j) {
            cin >> graph[i][j];
        }
    }

    int src;
    cout << "Enter Akshay's house location (source vertex number): ";
    cin >> src;

    dijkstra(graph, src, vertices);

    return 0;
}
